name: Release and update v1 tag

on:
  push:
    tags:
      - 'v1.*.*'     # Listen for all v1.x.y tag pushes

permissions:
  contents: write   # Need write permission to push tags and create releases

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for tag operations

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get current tag name
          CURRENT_TAG="${GITHUB_REF#refs/tags/}"
          
          # Get the previous tag for comparison
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating release notes from $PREVIOUS_TAG to $CURRENT_TAG"
            # Generate changelog from previous tag to current tag
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..$CURRENT_TAG --no-merges)
          else
            echo "No previous tag found, generating full changelog"
            # Generate full changelog if no previous tag
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
          fi
          
          # Create release notes using printf with correct quote matching
          RELEASE_NOTES=$(printf "## What's Changed in %s\n\n%s\n\n---\n*This release was automatically generated by GitHub Actions*" "$CURRENT_TAG" "$CHANGELOG")
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        run: |
          # Get current tag name
          CURRENT_TAG="${GITHUB_REF#refs/tags/}"
           
          # Create release using GitHub CLI
          gh release create $CURRENT_TAG \
            --title "Release $CURRENT_TAG" \
            --notes "${{ steps.release_notes.outputs.release_notes }}" \
            --draft=false \
            --prerelease=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update 'v1' tag to this release
        run: |
          # Configure git user info
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Get current tag name (remove refs/tags/ prefix)
          CURRENT_TAG="${GITHUB_REF#refs/tags/}"
          echo "Current tag: $CURRENT_TAG"
          
          # Delete local v1 tag if exists
          git tag -d v1 2>/dev/null || true
          
          # Create new v1 tag pointing to current commit
          git tag v1
          
          # Push v1 tag to remote repository
          echo "Pushing v1 tag to origin..."
          git push origin v1 --force
          
          echo "Successfully updated v1 tag to point to $CURRENT_TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 